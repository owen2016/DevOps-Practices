pipeline {
    agent {
        label 'Linux'
        //docker {
        //    image 'maven:3-alpine'
        //    label 'Ubuntu'
        //    args '-v /root/.m2:/root/.m2'
            //registryUrl 'https://myregistry.com/'
            //registryCredentialsId 'myPredefinedCredentialsInJenkins'
        //}
    }
    tools {
        maven 'apache-maven-3.6.2' 
    }
    environment { 
        
        BUILDENV = 'daily'
        TESTENV = 'dev'
        DEPLOYENV = 'uat'
        // Using returnStdout
        CC = """${sh(
                returnStdout: true,
                script: 'echo "clang"'
            )}""" 
        // Using returnStatus
        EXIT_STATUS = """${sh(
                returnStatus: true,
                script: 'exit 1'
            )}"""
    }
 
    stages {

        stage('Build') {
            agent { label 'Linux' }
            environment { 
                workpath= "${WORKSPACE}"
                DEBUG_FLAGS = '-g'
            }
            when {anyOf {environment name:'BUILDENV',value:'test';environment name:'BUILDENV',value:'dev';environment name:'BUILDENV',value:'daily'}}
            steps {

                sh 'printenv'
                sh 'mvn -B -DskipTests clean package' 
                ansiColor('xterm') {
                    dir("${WORKSPACE}") {
                        ansiblePlaybook colorized: true, installation: 'ansible', inventory: 'Ansible/Playbooks/hosts/hosts',credentialsId: '16.51-motoubuntu', playbook: 'Ansible/Playbooks/java-maven-app-build.yml',  extras: '--extra-vars "workdir=/home/motoubuntu/jenkins-agent/workspace/simple-java-maven-app"',sudoUser: null
                    }
                }
            }
            post {
                always {
                    echo "[WORKSPACE]          : ${env.WORKSPACE}"
                    echo "[WORKSPACE]          : ${WORKSPACE}"
                }
            } 
        }

        stage('Test') {
            when {anyOf {environment name:'TESTENV',value:'test';environment name:'TESTENV',value:'dev';environment name:'TESTENV',value:'daily'}}
            steps {
                ansiColor('xterm') {
                    dir("${WORKSPACE}") {
                        ansiblePlaybook colorized: true, installation: 'ansible', inventory: 'Ansible/Playbooks/hosts/hosts',credentialsId: '16.51-motoubuntu', playbook: 'Ansible/Playbooks/java-maven-app-test.yml',  extras: '--extra-vars "env=${TESTENV} workdir=${WORKSPACE}"',sudoUser: null
                    }
                }
            }
            //post {
            //    always {
            //        junit 'target/surefire-reports/*.xml'
            //    }
            //}    
        }
        
        stage('Deploy') {
            agent { label 'Linux' }
            when {anyOf {environment name:'DEPLOYENV',value:'uat';environment name:'DEPLOYENV',value:'prod'}}
            steps {
                sh './jenkins/scripts/deliver.sh'
                ansiColor('xterm') {
                    ansiblePlaybook colorized: true, installation: 'ansible', inventory: 'Ansible/Playbooks/hosts/hosts',credentialsId: '16.51-motoubuntu', playbook: 'Ansible/Playbooks/java-maven-app-deploy.yml',  extras: '--extra-vars "env=${TESTENV} workdir=${WORKSPACE}"',sudoUser: null
                }
            }
        }
 
    }
    post {
    	always {
    		echo "done"
    	}
        //success {
        //    mail to: owenli@devops.com.cn, subject: 'The Pipeline failed :('
        //}
        failure {
            echo "mail to: owenli@devops.com.cn, subject: 'The Pipeline failed :('"
        }
    }
}
